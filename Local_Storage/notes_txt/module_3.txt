 Digital Electronics
(19-204-0302)Text Books
• 1. M. Morris Mano, Digital Logic & Computer
Design, 4/e, Pearson Education, 2013.
●
2. FUNDAMENTALS OF DIGITAL CIRCUITS
THIRD EDITION A. Anand Kumar
Third Edition
Fundamentals of
Digital Circuits
th
A. Anand Kumar
Digital Logic
and
Computer Design
M. Morris Mano
PEARSONModule - 3Syllabus - Module 3
Sequential Logic Circuits: Latches, Flip
Flops, SR, JK, T, D. Triggering of FF,
Conversion
• Master/Slave FF, Analysis of clocked
sequential circuits state reduction and
assignment
• Design of clocked sequential circuits,
Shift registers, Design of Counters,
Asynchronous and Synchronous ripple
counters, Ring counters, Johnson counterSequential
Logic Circuits
Sequential switching circuits are those whose output
levels at any instant of time are dependent not only on
the levels present at the inputs at that time, but also on
the state of the circuit, i.e. on the prior input level
conditions (i.e. on its past inputs).
• The past history is provided by feedback from the
output back to the input.
• It means that sequential switching circuits have
memory.
●
• Sequential circuits are thus made of combinational
circuits and memory elements.
LO
5Examples for Switching Circuits
Combinational
Parallel adders, subtractors, encoders, decoders, code
converters, parity bit generators, etc.
Sequential
• Counters, shift registers, serial adders, sequence
generators, logic function generators, etc.
6●
Block diagram of a sequential circuit.
Combinational
circuit
Inputs
●
Memory
elements
Figure shows a block diagram of a sequential circuit.
●
• The memory elements are connected to the combinational circuit as a feedback
path.
Outputs
• The information stored in the memory element at any given time defines the
present state of the sequential circuit.
The present state and the external inputs determine the outputs and the next
state of the sequential circuit.
7Comparison between combinational
and sequential circuits
Combinational circuits
1. In combinational circuits, the output variables
at any instant of time are dependent only on
the present input variables.
2. Memory unit is not required in combinational
circuits.
3. Combinational circuits are faster because the
delay between the input and the output is due
to propagation delay of gates only.
4. Combinational circuits are easy to design.
Sequential circuits
1. In sequential circuits, the output variables at
any instant of time are dependent not only on
the present input variables, but also on the
present state, i.e. on the past history of the
system.
2. Memory unit is required to store the past history
of the input variables in sequential circuits.
3. Sequential circuits are slower than
combinational circuits.
4. Sequential circuits are comparatively harder
to design.
8Classification of Sequential Circuits
• The sequential circuits may be classified as synchronous
sequential circuits and asynchronous sequential circuits
depending on the timing of signals.
• Synchronous sequential circuits.
The sequential circuits which are controlled by a clock are
called synchronous sequential circuits.
●
•These circuits will be active only when clock signal is
present.
9Asynchronous Sequential Circuits.
The sequential circuits which are not controlled by a clock
are called asynchronous sequential circuits, i.e. the
sequential circuits in which events can take place any time
the inputs are applied are called asynchronous sequential
circuits.
10Comparison between synchronous and
asynchronous sequential circuits
Synchronous sequential circuits
1. In synchronous circuits, memory elements are
clocked FFs.
2. In synchronous circuits, the change in input
signals can affect memory elements upon
activation of clock signal.
3. The maximum operating speed of the clock
depends on time delays involved.
4. Easier to design.
Asynchronous sequential circuits
1. In asynchronous circuits, memory elements are
either unclocked FFs or time delay elements.
2. In asynchronous circuits, change in input.
signals can affect memory elements at any
instant of time.
3. Because of the absence of the clock,
asynchronous circuits can operate faster than
synchronous circuits.
4. More difficult to design.
11Flip Flops
• The most important memory element in a sequential
circuit is the flip-flop, which is made up of an assembly
of logic gates.
• A flip-flop (FF), known more formally as a bistable
multivibrator, has two stable states.
It can remain in either of the states indefinitely. Its state
can be changed by applying the proper triggering signal.
• It is also called a binary or one-bit memory.
12Inputs
:
FF
Q
(Normal output)
(Inverted output)
Figure 10.3 General flip-flop symbol.
The flip-flop has two outputs, labelled Q & ā
•The Q output is the normal output of the flip-flop and
is the inverted output.
• The state of the flip-flop always refers to the state of
the normal output Q.
13A flip-flop is said to be in HIGH state or logic 1 state or
SET state when Q = 1, and in LOW state or logic 0 state or
RESET state or CLEAR state when Q = 0.
• The input signals which command the flip-flop to change
state are called excitations.
Flip-flop serves as a storage device.
• It stores a 1 when its Q output is a 1, and stores a 0 when
its Q output is a 0.
Flip-flops are the fundamental components of shift
registers and counters.
14Latched Flipflops
• It refers to non-clocked flip-flops, because these flip-flops
'latch on' to a 1 or a 0 immediately upon receiving the
input pulse called SET or RESET.
• They are not dependent on the clock signal for their
operation, i.e. a latch is a sequential device that checks all
its inputs continuously and changes its outputs
accordingly at any time independent of a clock signal.
15Active High Input Latch & Active Low
Input Latch.
• A latch may be an active-high input latch or an
active-low input latch.
• Active-high means that the SET and RESET inputs are
normally resting in the LOW state and one of them will
be pulsed HIGH whenever we want to change the latch
outputs.
• Active-low means that the SET and RESET inputs are
normally resting in the HIGH state and one of them will
be pulsed LOW whenever we want to change the latch
outputs.
16●
The S-R Latch (SR Flip Flop)
The simplest type of flip-flop is called an S-R latch.
ā
It has two outputs labeled Q and and two inputs
labeled S and R.
• It can be constructed using either two cross-coupled
NAND gates or two-cross coupled NOR gates.
•Using two NOR gates, an active-high S-R latch can be
constructed and using two NAND gates an active-low S-R
latch can be constructed.
17SR Latch/SR Flip Flop (Active High)
Inputs
S
R
Q
(a) Logic symbol
R
Ex
-Q
S
(b) Logic diagram:
Outputs
SRQ Q
000 0
0 1 1
0
0100
0 1 1 0
100
1 01
110 x
1 1 1
State
No Change (NC)
Reset
(c) Truth table
Set
Indeterminate
(invalid)
18When the SET input is made HIGH, Q
becomes 1 (and equals O). When the RESET
input is made HIGH, Q becomes 0 (and equals
1). If both the inputs S and R are made LOW,
there is no change in the state of the latch. It
means that the latch remains in the same state
in which it was, prior to the application of
inputs. If both the inputs are made HIGH, the
output is unpredictable, i.e. both Q and may be
HIGH, or both may be LOW or any one of them
may be HIGH and the other LOW. This
condition is described as not-allowed,
unpredictable, invalid or indeterminate. The S-
R latch is also called
called R-S latch or S-C
(SET-CLEAR) latch. Resetting is also called
clearing because we CLEAR out the 1 in the
output by resetting to 0.
19Gated Latches (Clocked Flip-Flops)
• In the latches described earlier, the output can change
state any time the input conditions are changed. So, they
are called asynchronous latches.
• Synchronous SR Latch
A gated S-R latch requires an enable (EN) input. Its S and R
inputs will control the state of the flip-flop only when the
enable is HIGH.
• When the enable is LOW, the inputs become ineffective
and no change of state can take place.
●
The ENABLE input may be a clock. So, a gated S-R latch is
also called a clocked S-R latch or synchronous S-R latch.S
EN
(a) Logic diagram
S Q
EN
R
Q
(b) Logic symbol
EN SRQ Q
1000 0
1 001 1
00
1010 0
1011
1100 1
11011
0XX00
0 X x 1
State
No change (NC)
1110x Indeterminate
1111 x (invalid)
No Change (NC)
(c) Truth table
Figure 10.7 A gated S-R latch.
Reset
Set
21The gated D-latch (D Flip Flop)
A single input (D Input) latch is called a D Latch.
●
• The output Q follows the D input when EN is High.
• D = 1, cause the latch to SET when ENABLED.
• D = 0, cause the latch to RESET when ENABLED.
22D
EN
EN
1
1
1
1
0
0
Do
G₂
(a) Logic diagram
DQ
0 0
0
1
1
1
G₁)
0
1
0
1
X X
Q+1
0
0
Q
D
EN
Q
(b) Logic symbol
State
Reset
1
1
0
1
(c) Truth table
Figure 10.9 A gated D-latch.
Set
Q
No Change (NC)
23●
Edge-Triggered Flip-Flops
The flip-flops using the clock signal are called the clocked flip-flops.
• The clock signal is distributed to all parts of the system and most of the system
outputs can change state only when the clock makes a transition.
• Clocked flip-flops may be positive edge-triggered or negative edge-triggered.
• Positive edge-triggered flip-flops are those in which 'state transitions' take
place only at the positive-going (0 to 1, or LOW to HIGH) edge of the clock
pulse, and negative edge-triggered flip-flops are those in which 'state
transitions' take place only at the negative-going (1 to 0, or HIGH to Low) edge
of the clock signal.
●
Positive-edge triggering is indicated by a 'triangle' at the clock terminal of the
flip-flop. Negative-edge triggering is indicated by a 'triangle' with a bubble at
the clock terminal of the flip-flop.
24The edge-triggering is also called dynamic triggering.
S
R
S-R FF
S
Q
R
Q
Q
S-R FF
D
D FF
(a) Logic symbols of positive edge-triggered FFs
Q
D
Q
Q
K Q
J-K FF
K
DFF
(b) Logic symbols of negative edge-triggered FFs
Figure 10.10 Edge-triggered flip-flops.
Q
Q
Q
J-K FF
25The edge-triggered S-R flip-flop
S
x<-T
R
Q
CSRQ Qn+1
(a) Logic symbol
CFE
↑0 0 0
0 1
个
↑
0
00
0
↑
↑ 1
↑1
1
1
0
X
0x
0
1881
0
1
1
0
1
xx
0
1
0 No
1
00
X
хх
State
Change (NC)
X
Reset
0
0
1
1
(b) Truth table
Figure 10.12 Positive edge-triggered S-R flip-flop.
Set
Indeterminate
No Change (NC)
26• The S and R inputs of the S-R flip-flop are called the
synchronous control inputs because data on these inputs
affect the flip-flop's output only on the triggering
(positive going) edge of the clock pulse.
Without a clock pulse, the S and R inputs cannot affect
the output.
• When S is HIGH and R is LOW, the Q output goes HIGH
on the positive-going edge of the clock pulse and the
flip-flop is SET. (If it is already in SET state, it remains
SET).
• When S is LOW and R is HIGH, the Q output goes LOW on
the positive-going edge of the clock pulse and the
flip-flop is RESET, i.e. cleared. (If it is already in RESET
state, it remains RESET).
27CLK
(a) Input waveforms
S
R
Q
(c) Output waveforms
Q
a
2
b
3
C
d
5
e
CLK-
S
>C
Q
R
(b) Logic symbol
Figure 10.13 Example 10.2: Waveforms-positive edge-triggered S-R flip-flop.
281. Initially, S = 0 and R = 0 and Q is assumed to be HIGH.
2. At the positive-going transition of the first clock pulse (i.e. at a),
both S and R are LOW. So, no change of state takes place. Q
remains HIGH and remains LOW.
3. At the leading edge of the second clock pulse (i.e. at b), S = 0 and
R = 1. So, the flip-flop resets. Hence, Q goes LOW and goes
HIGH.
4. At the positive-going edge of the third clock pulse (i.e. at c), S = 1
and R = 0. So, the flip-flop sets. Hence, Q goes HIGH and goes
LOW.
5. At the rising edge of the fourth clock pulse, S = 1 and R = 0. Since
the flip-flop is already in a SET state, it remains SET. That is, Q
remains HIGH and remains LOW.
6. The fifth pulse resets the flip-flop at its positive-going edge
because S = 0 and R = 1 is the input condition and Q = 1 at that
time.
7. The sixth pulse sets the flip-flop at its rising edge because S = 1
and R = 0 is the input condition and Q = 0 at that time.• The truth table of a negative edge-triggered S-R flip-flop
is the same as that of a positive edge triggered S-R
flip-flop except that the arrows point downwards.
This flip-flop will trigger only when the clock input goes
from 1 to 0.
30The
edge-triggered
D flip-flop:
• The edge-triggered D flip-flop has only one input
terminal.
The D flip-flop may be obtained from an S-R flip-flop
by just putting one inverter between the S and R
terminals.
31S
DOR
(a) D flip-flop from the S-R flip-flop
CDQQ+1
0
0
↑
↑
Q
0
X
0 x
OT
0
1
↑|1 0
↑
1
1
0
0
1
X
1
1
0 0
¦¦
1
A
State
Reset
Set
D
Q
(b) Logic symbol
No Change (NC)
(c) Truth table
Figure 10.15 The positive edge-triggered D flip-flop.
32• The output Q will go to the same state that is present
on the D input at the positive-going transition of the
clock pulse.
• In other words, the level present at D will be stored in
the flip-flop at the instant the positive-going transition
occurs.
●
That is, if D is a 1 and the clock is applied, Q goes to a 1
and to a 0 at the rising edge of the pulse and
thereafter remain so.
• If D is a 0 and the clock is applied, Q goes to a 0 and Q
to a 1 at the rising edge of the clock pulse and
thereafter remain so.
33• The negative edge-triggered D flip-flop operates in the
same way as the positive edge-triggered D flip-flop
except that the change of state takes place at the
negative-going edge of the clock pulse.
• In the truth table of the negative edge triggered flip-flop
the arrows point downwards.
34The
edge-triggered J-K flip-flop
• The functioning of the J-K flip-flop is identical to that of
the S-R flip-flop, except that it has no invalid state like
that of the S-R flip-flop.
A
K
C
Q
āt
n+1
CJKQQpt
1000 0
100 1 1
n
1010 0
10 1 1 0
↑
↑
00
100
1
1 0 1 1
11 10
1
1 1 0
0XX0
0
0 X X 1 1
State
No Change (NC)
Reset
Set
Toggle
No Change (NC)
(a) Logic symbol
(b) Truth table
Figure 10.17 Positive edge-triggered J-K flip-flop.
35• When J = 0 and K = 0, no change of state takes place even
if a clock pulse is applied.
When J = 0 and K = 1, the flip-flop resets at the
positive-going edge of the clock pulse.
When J = 1 and K = 0, the flip-flop sets at the
positive-going edge of the clock pulse.
• When J = 1 and K = 1, the flip-flop toggles, i.e. goes to the
opposite state at the positive-going edge of the clock
pulse.
• In this mode, the flip-flop toggles or changes state for
each occurrence of the positive-going edge of the clock
pulse.
36• A negative edge-triggered J-K flip-flop operates in the
same way as a positive edge-triggered J-K flip-flop
except that the change of state takes place at the
negative-going edge of the clock pulse.
• In the truth-table of a negative edge-triggered J-K
flip-flop the arrows point downwards.
37CLK
(a) Input waveforms
K
(c) Output waveform
a
2. 3.
C
5
de
+1
t
J
CLK-C
Q
K Q
(b) Logic symbol
Figure 10.18 Example 10.3: Waveforms-edge-triggered J-K flip-flop.
38• 1. Initially J = 0, K = 0 and CLK = 0. Assume that the initial
state of the flip-flop is a 1, i.e. Q = 1 initially.
2. At the negative-going edge of the first clock pulse (i.e. at a), J = 1
and K = 0. So, Q remains as a 1 and, therefore, as a 0.
4.
3. At the trailing edge of the second clock pulse (i.e. at b), J = 0 and
K = 1. So, the flip-flop resets. That is, Q goes to a 0 and to a 1.
At the falling edge of the third clock pulse (i.e. at c), both J and K
are a 1. So, the flip-flop toggles. That is, Q changes from a 0 to a
1 and from a 1 to a 0.
5. At the negative-going transition of the fourth clock pulse (i.e. at
d), J = 0 and K = 1. So, the flip-flop RESETS, i.e. Qgoes to a 0 and
> to a 1.
6. At the negative going edge of the fifth clock pulse (i.e. at d), J = 0
and K = 1. So the flip-flop remains reset, i.e. Q remains as 0 and
remains as 1.
39The edge-triggered T flip-flop
•A T flip-flop has a single control input, labelled T
for toggle.
•When T is HIGH, the flip-flop toggles on every
new clock pulse.
•When T is LOW, the flip-flop remains in whatever
state it was before.
•It is easy to convert a J-K flip-flop to the
functional equivalent of a T flip-flop by just
connecting J and K together and labelling the
common connection as T.
40J
K Q
C
Q
OI
Q
(a) T flip-flop from JK flip-flop (b) Logic symbol
CITIQ, Qu
000
011
←E
101
110
0x00
0x11
State
No Change (NC)
Figure 10.20 Edge-triggered T flip-flop.
(c) Truth table
Toggle
No Change (NC)
41Excitation table (State Table) of a flip-flop
• A table which lists the present state, the next state and
the excitations of a flip-flop is called the excitation table
of a flip-flop,
i.e., the excitation table is a table which indicates the
excitations required to take the flip-flop from the present
state to the next state.
•The characteristic equation of a flip-flop is the equation
expressing the next state of a flip-flop in terms of its
present state and present excitations.
42• To obtain the characteristic equation of a flip-flop,
Write the excitation requirements of the flip-flop.
•2.
Draw a K-map for the next state of the flip-flop in
terms of its present state and inputs and simplify it
•1.
43Excitation Table - J K Flip Flop
Present state
Q₁
0
OO
0
0
0
1
Inputs
JK
0
0
0
1
1
0
1
1
0 0
0
1
1
0
1
1
(a) Excitation requirements of JK flip-flop
1
1
Next state
Qnt
0
0
1
1
1
0
1
0
JK
Q₁ 00 01
0
0
1
5
11
1
3
Q₁ = Q₁+Q₂K
n+1
7
10
K-map for Q1
The characteristic equation
of a JK flip-flop is
44Excitation Table – S R Flip Flop
SR
Present state
Q₂
Next state
Q₁+1
0
0
0
0 1
0
1
0
1
0
0
1
0
0
1
1
(b) Excitation requirements of SR flip-flop
Figure 10.23 Excitation requirements and K-map of an S-R flip-flop.
0
0
0
1
Inputs
SR
0
00 01 11
0
51
X
X
3
10
1
21
K-map for Q₁ of SR flip-flop
n+1
The characteristic equation
of SR flip-flop
Q₁+1 = S+Q₂R
61
45Excitation Table - T Flip Flop
Present state
Q₁
n
Input
T
0
0
1
1
Next state
Qu
Qn+1
0
1
0
1
Excitation requirements of T flip-flop
0
1
1
0
0
0
1 1
0
2
1
1
1
3
K-map for Q1 of T flip-flop
n+1
The characteristic equation
of T flip-flop is
Q=Q₂T+Q₂T
(c)
Figure 10.24 Excitation requirements and K-map of a T flip-flop.Race Around Condition
For a J-K flip-flop, consider the assignment of
excitations J = K = 1. If the width of the clock pulse is
too long, the state of the flip-flop will keep on
changing from 0 to 1, 1 to 0, 0 to 1 and so on, and at
the end of the clock pulse, its state will be uncertain.
This phenomenon is called the race around condition.
• The outputs Q and will change on their own if the
clock pulse width is too long compared with the
propagation delay of each NAND gate.
• This problem is eliminated using master-slave flip-flop
47Master-Slave
(Pulse-Triggered)
Flip-Flops
• The master-slave flip-flop was developed to to avoid the
problems of logic race in clocked flip-flops.
•In MS FF, a known time delay (equal to the width of one
clock pulse) between the time that the flip-flop responds
to a clock pulse and the time the response appears at its
output.
• A master-slave flip-flop is also called a pulse-triggered
flip-flop because the length of the time required for its
output to change state equals the width of one clock
pulse.
48The master-slave or pulse-triggered flip-flop actually contains
two flip-flops- a master flip-flop and a slave flip-flop.
• The control inputs are applied to the master flip-flop.
On the rising edge of the clock pulse, the levels on the control
inputs are used to determine the output of the master.
• On the falling edge of the clock pulse, the state of the master
is transferred to the slave, whose outputs are Q and
●
Thus, the actual outputs of the flip-flop, i.e. Q and a change
just after the negative-going transition of the clock.
There are three basic types of master-slave flip-flops-S-R, D,
and J-K.
49• The key to identifying a master-slave flip-flop by its
logic symbol is the postponed output symbol at the
outputs.
S
C
R
(a) S-R flip-flop
·Q
D
C
(b) D flip-flop
Q
Q
J
C
K
1Q
1-Q
(c) J-K flip-flop
50The Master-Slave (Pulse-Triggered)
S-R Flip-Flop
S
R
G₁
G₂
Master
S
0
0
1
1
0
1
G3
Inputs
R
1
G4
(a) Logic diagram
CLK
4554
Output
Q
Qo
0
1
?
(b) Truth table
C
G5
Go
A
Slave
Comments
G7
Gg
No change
RESET
SET
Invalid●
The external control inputs S and R are applied to the master section.
• The master section is basically a gated S-R latch, and responds to the external
S-R inputs applied to it at the positive-going edge of the clock signal.
• The slave section is the same as the master section except that it is clocked on
the inverted clock pulse and thus responds to its control inputs (which are
nothing but the outputs of the master flip-flop) at the negative-going edge of
the clock pulse.
●
The master section assumes the state determined by the S and R inputs at the
positive-going edge of the clock pulse and the slave section copies the state of
the master section at the negative-going edge of the clock pulse.
• The state of the slave then immediately appears on its Q and outputs.
●
52(a) Input
waveforms
(b) Output
waveform
CLK
S
R
G3
Master
output
CLK
Slave
output
1
2
3
Master Slave Master Slave Master Slave Master
responds copies responds copies responds copies responds
to data
the
the
to data
master
master
to data
to data
the
master
3Let us assume that, initially the flip-flop is SET, i.e. Q = 1 and the
control inputs are S = 0 and R = 1 and the output of master is a 1.
At the positive-going edge of the first clock pulse, the master resets,
i.e. the output of G3 goes LOW. At the negative-going edge of the
first clock pulse, the slave copies it. So, Q goes LOW. The inputs S and
R now change when the clock is LOW; so it does not affect the
operation. At the positive-going edge of the second clock pulse, S = 1
and R = 0 (and G3 = 0, Q = 0). So, the master sets, i.e. the output of G3
goes HIGH. At the negative-going edge of the second clock pulse, the
slave copies this action of the master and, therefore, Q goes HIGH.
At the positive-going edge of the third clock pulse, S = 0 and R = 1, so,
the master resets, i.e. the output of G3 goes LOW. At the negative-
going edge of the third clock pulse, the slave copies this action of the
master and, therefore, Q goes LOW.
At the positive-going edge of the fourth clock pulse, S = 0 and R = 0
(the output of G3 = 0, Q = 0). So, there is no change in the state of the
master. Hence, there will not be any change in the state of the slave
at the negative-going edge of that clock pulse and Q, therefore,
remains LOW.The Master-Slave (Pulse-Triggered) D Flip-Flop
D
C-
G₁
G₂
Master
G3
Inputs
D CLK
0
1
G4
(a) Logic diagram
Output
Q
0
♫ 1
G5
C
RESET
SET
G6
Comments
G7
X
Slave
G₂
(b) Truth table
Figure 10.39 The master-slave D flip-flop.
Q
Q
55The D input is transferred to the master at the
positive-going edge of the clock pulse and the same is
copied by the slave and, therefore, appears at the Q
output of the slave at the negative-going edge of the
clock pulse.
56The Master-Slave (Pulse-Triggered) J-K Flip-Flop
CLK
K
S
G₂
J
0
0
1
1
PRE
CLR
Inputs
K
0
1
0
1
G3
G4
C
QM
3544
QM
(a) Logic diagram
Output
Q
CLK
Qo
0
1
Qo
(b) Truth table
G5
G6
Comments
No change
RESET
SET
Toggle
G7
Ga
10
57The truth table operation is the same as that of a negative
edge-triggered J-K flip-flop except for the way in which it is
triggered.
●
The logic diagram of the master-slave J-K flip-flop is similar to
that of the master-slave S-R flip-flop.
• The difference is that the Q output is connected back to the
input of G2 and the a tput is connected back to the input
of G1 and the external inputs are designated as J and K.
The M-S J-K flip-flop is a J-K flip-flop followed by an
S-R-flip-flop, i.e. the master flip-flop is a J-K flip-flop and slave
flip-flop is an S-R flip-flop.
The problem of logic race is eliminated because while the
clock drives the master, the inverted clock drives the slave.
58●
Flip-Flop Excitation Tables
The excitation table of a flip-flop can be obtained from
its truth table.
It indicates the inputs required to be applied to the
flip-flop to take it from the present state to the next
state.
59The truth table and excitation table of
an S-R flip flop
Table 10.5a S-R truth table
S
O
0
1
1
PS
Qn
0
0
1
1
R
0
1
0
1
NS
Q₂+1
0
1
0
1
Table 10.5b S-R excitation table
Required inputs
Q₁+1
Q₂
O
SOLO X
?
RXOIO
60The truth table and excitation table of
a J-K flip-flop
Table 10.6a J-K truth table
J
K
PS
Qn
0
0
1
1
0
0
1
1
1
0
1
NS
Q₂+1
0
1
0
1
Table 10.6b J-K excitation table
Required inputs
J
K
Qn+1
Q₂
хх-о
1
Qn
XX-O
61The truth table and the excitation
table of the D flip-flop
Table 10.7a D truth table
PS
Qn
0
0
1
1
D
0
1
Qn+1
0
1
Table 10.7b D excitation table
NS
Qn+1
0
1
0
1
Required input
D
O
1
O
1
62The truth table and the excitation table
of the T flip-flon
Table 10.8a T truth table
T
PS
Qn
O
O
1
1
O
1
Table 10.8b T excitation table
Qn+1
Qn
Q₁t
NS
Q₁+1
0
1
0
1
Required input
T
O
1
1
0
03Conversion of Flip-Flops
• To convert one type of flip-flop into another type, we
have to obtain the expressions for the inputs of the
existing flip-flop in terms of the inputs of the required
flip-flop and the present state variables of the existing
flip-flop and implement them.
Inputs of -
required
flip-flop
Combinational
circuit
Actual
flip-flop
Figure 10.43 Block diagram for conversion of flip-flop.
Output of
required
flip-flop
64S-R flip-flop to J-K flip-flop
Here the external inputs to the already available S-R
flip-flop will be J and K.
•S and R are the outputs of the combinational circuit,
which are also the actual inputs to the S-R flip-flop.
•We write a truth table with J, K, Qn, Qn + 1, S, and R,
where Qn is the present state of the flip-flop and Qn + 1
is the next state obtained when the particular J and K
inputs are applied,
•i.e. Qn denotes the state of the flip-flop before the
application of the inputs and Qn + 1 refers to the state
obtained by the flip-flop after the application of inputs.•J, K and Qn can have eight combinations.
• For each combination of J, K and Qn, find the
corresponding Qn + 1, i.e. determine to which next state
(Qn + 1) the J-K flip-flop will go from the present state
Qn if the present inputs J and K are applied.
Complete the table by writing the values of S and R
required to get each Qn + 1 from the corresponding Qn,
• i.e. write what values of S and R are required to change
the state of the flip-flop from Qn to Qn + 1.
66KQ₁
n
0
1
00
0
1
0
01
X
11
X
0
0
S = JQn
3
10
0
1
External
Inputs
JK
0
0
0
0
1
1
1
1
2
0
0
1
1
0
0
1
1
0
Present
State
KQ₂
n
1
Qn
0
1
0
1
0
1
0
1
(a) Conversion table
00 01
X 0
Next
State
0ʻo
Qp+1
0
1
0
0
1
1
1
0
1
5
11
1
R=KQ₁
3
S
0
X
Flip-flop
Inputs
0
0
1
X
1
0
10
X
0
2
6
R
XO
0
X
1
0
0
0
1
K-
S
(b) K-maps for S and R
Figure 10.44 Conversion of S-R flip-flop to J-K flip-flop.
C
Q₂
R Q₂
'n
(c) Logic diagramS
RQn
0
1
J-K flip-flop to S-R flip-flop
External
Inputs
SR
8
00
0
1
0
4
01
X
X
1
5
11
X
X
3
J=S
7
0
0
0
0
1
1
10
0
X
2
0
0
1
1
0
0
S
0
Present Next
State
State
RQ₁
1
Q₂
0
1
0
1
0
1
(a) Conversion table
00
X
X
0
4
Qn+1
0
1
0
0
1
1
01
0
0
1
11
1
X
3
K = R
7
Flip-flop
Inputs
J
0
X
0
X
1
10
X
X
6
K
X
0
X
1
X
0
S
J
C
Q₂
(b) K-maps for J and K
(c) Logic diagram
Figure 10.45 Conversion of J-K flip-flop to S-R flip-flop.
R-K
Qn0
1
S-R flip-flop to D flip-flop:
0
0
1
2
0
X
External Present Next
Inputs
State
State
S=D
3
D
0
0
1
1
0
1
Q₂
0
1
0
1
(a) Conversion table
0
X
0
0
2
1
1
0
Qp+1
0
R=D
3
0
1
1
Flip-flop
Inputs
S
0
0
1
x
D
R
X
1
0
0
S
C
Q₁
(b) K-maps for S and R
(c) Logic diagram
Figure 10.46 Conversion of S-R flip-flop to D flip-flop.
Qn
R
69S
RQ₂
0
00
0
D flip-flop to S-R flip-flop
External
Inputs
1
4
01
1
S
0
0
0
0
1
1
5
11
0
D
D
Qn
30
C
1
Qn
D = S+RQn
(b) K-map for D
(c) Logic diagram
Figure 10.47 Conversion of D flip-flop to S-R flip-flop.
X
3
R
0
0
1
1
0
0
7
10
0
X
Present Next
State
State
6
Q₁
0
1
0
1
0
1
Qn+1
0
1
0
0
1
1
(a) Conversion table
S
Flip-flop
Input
D
R
0
1
0
0
1
1O
0
0
1
O
J-K flip-flop to T flip-flop
2
1
X
X
External
Input
T
0
0
1
1
J=T
3
0
Present Next
State
State
1
Qn
0
1
0
1
(a) Conversion table
0
J Q₂ n
II
C
K
Q₁
(b) K-maps for J and K
(c) Logic diagram
Figure 10.48 Conversion of J-K flip-flop to T flip-flop.
X
X
O
1
2
0
Qn+1
0
1
1
0
1
K=T
3
Flip-flop
Inputs
J
0
1
X
T
K
X
0
X
1
71an
0
J-K flip-flop to D flip-flop
0
0
1
0
2
1
X
X
External Present Next
Input
State
State
D
0
0
1
1
J=D
3
D
0
1
Qn
0
1
0
1
(a) Conversion table
0
X
X
0
2
(b) K-maps for J and K
1
1
0
Qn+1
0
K=D
0
1
1
3
Flip-flop
Inputs
J
0
X
1
X
D-
K
X
1
X
0
J
Qn
(c) Logic diagram
Figure 10.49 Conversion of J-K flip-flop to D flip-flop.
C
Qn
K
72D flip-flop to J-K flip-flop
Next
State
кап
0
1
External
Inputs
O
0
0
O
1
1
1
1
00
0
1
0
4
01
1
1
1
5
K
0
0
1
1
O
O
1
1
11
0
0
3
7
Present
State
Qn+1
0
1
0
O
1
1
1
0
(a) Conversion table
10
0
1
2
6
Qn
0
1
O
1
O
1
0
1
Flip-flop
Input
D
0
1
O
O
1
1
1
0
D Q₁
HOT
C
Qn
D = JQn+KQn
(b) K-maps for D
(c) Logic diagram
Figure 10.50 Conversion of D flip-flop to J-K flip-flop.
73Applications of Flip-Flops
Some of the basic applications are parallel data
storage, serial data storage, transfer of data, frequency
division, counting, parallel to serial conversion, serial to
parallel conversion, synchronizing the effect of
asynchronous data, detection of an input sequence,
etc.
741. Parallel Data Transfer
• 2. Serial Data Transfer
●
Types of Data Transfer
Parallel
Parallel data transfer is the simultaneous transmission of
all bits of data from one device to another.
•Serial
Serial data transfer is the transmission of one bit of data
at a time from one device to another. Serial data must be
transmitted under the synchronization of a clock, since
the clock provides the means to specify the time at
which each new bit is sampled.
75Shift Register
A register is a set of FFs used to store binary data.
• The storage capacity of a register is the number of bits (1s and
Os) of digital data it can retain.
●
Loading a register means setting or resetting the individual FFs,
i.e. inputting data into the register so that their states correspond
to the bits of data to be stored.
• Loading may be serial or parallel.
In serial loading, data is transferred into the register in serial
form, i.e. one bit at a time, whereas in parallel loading, the data
is transferred into the register in parallel form meaning that all
the FFs are triggered into their new states at the same time.
76• A register may output data either in serial
form or in parallel form.
• Serial output means that the data is
transferred out of the register, one bit at a
time serially.
• Parallel output means that the entire data
stored in the register is available in
parallel form, and can be transferred out
at the same time.
77Buffer Register
Some registers do nothing more than storing a binary
word.
• The buffer register is the simplest of registers.
It simply stores the binary word.
•The buffer may be a controlled buffer.
• Most of the buffer registers use D flip-flops.
78●
●
4-bit buffer register
X39
X₁9
CLK
D₁ Q₂₁
FF₁
Х29
D₂ Q₂
FF₂
D₂ Q₂
FF3
D₁ Q4
FF₁
The binary word to be stored is applied to the data terminals.
On the application of clock pulse, the output word becomes
the same as the word applied at the input terminals,
i.e. the input word is loaded into the register by the
application of clock pulse.
79• When the positive clock edge arrives, the
stored word becomes:
Q₂Q₂Q₂Q₁ = x₂x₂x₂x₁
4 3 2 1
or
Q=X
80Data Transmission in Shift Registers
A number of FFs connected together such that data
may be shifted into and shifted out of them is called a
shift register.
• Data may be shifted into or out of the register either
in serial form or in parallel form.
• There are four basic types of shift registers:
●
• 1. serial-in, serial-out
●
• 2. serial-in, parallel-out
3. parallel-in, serial-out
●
4. parallel-in, parallel-out
81Serial
data
input
Serial
data
input
(a) Serial-in, serial-out,
shift-right, shift register
Parallel data output
(c) Serial-in, parallel out, shift register
Parallel data input
(e) Parallel-in, serial-out,
shift register
Serial
data
output
(g) Rotate-right shift register
Serial
data
output
Serial
data +
output
(b) Serial-in, serial-out,
shift-left, shift register
Parallel data input
Parallel data output
(d) Parallel-in, parallel-out, shift register
in
‡
I
(f) Serial-in, serial-out, shift-left,
shift-right, (bidirectional) shift register
out
Serial
- data
input
(h) Rotate-left shift register
Figure 11.3 Data transfer in registers.
out
-in
82Serial-in, Serial-out, Shift Register
This type of shift register accepts data serially, i.e.
one bit at a time, and also outputs data serially.
Serial input o
CLK
0-
D₁ Q₁ D₂ Q₂
FF₁
FF₂
D3 Q3
FF3
D₁Q₁
FF4
Serial output
Figure 11.44-bit serial-in, serial-out, shift-right, shift register.
83• With four stages, i.e. four FFs, the register can store
upto four bits of data.
Serial data is applied at the D input of the first FF.
The Q output of the first FF is connected to the D input
of the second FF, the Q output of the second FF is
connected to the D input of the third FF and the Q
output of the third FF is connected to the D input of
the fourth FF.
The data is outputted from the Q terminal of the last
FF.
84• When serial data is transferred into a register, each
new bit is clocked into the first FF at the positive-going
edge of each clock pulse.
The bit that was previously stored by the first FF is
transferred to the second FF.
●
The bit that was stored by the second FF is transferred
to the third FF, and so on.
• The bit that was stored by the last FF is shifted out.
854 Bit Serial-in, Serial-out, Shift
Register using JK/SR FF
Serial input
CLK
0-
Serial input
0
CLK
0-
J₁ Q₁
FF₁
K₁
S₁ Q₁
FF₁
R₁ Q₁
J₂ Q₂
FF₂
K₂ Q₂
(a) Using J-K FFs
S₂ Q₂
FF₂
R₂ Q₂
(b) Using S-R FFs
√3 Q3
FF3
K₂
S3 Q3
FF3
R₂ Q3
J₁
FF4
SA
Q₁
Q4
FF₁
R₁Q₁
864-bit serial-in, serial-out,
shift-left, shift register.
Serial input
Q D -0
Serial
output
Q₁ D₁
Qg Da
Q₂ D₂
HTTE
(a) Logic diagram
CLK
87Serial-in, Parallel-out,
Shift Regictor
QA
Data input
0
CLK
0
D₁ QA
FF₁
D₂ QB
FF₂
(a) Logic diagram
Data input-
QB
CLK-
D3 Qc
FF3
SRG4
QA QB Qc QD
(b) Logic symbol
Qc
D₁ Q₂
FF
80
In this type of register, the data bits are entered into
the register serially, but the data stored in the register
is shifted out in parallel form.
88• Once the data bits are stored, each bit
appears on its respective output line
and all bits are available
simultaneously.
• The serial-in, parallel-out, shift register
can be used as a serial-in, serial-out,
shift register if the output is taken from
the Q terminal of the last FF.
89Parallel-in, Serial-out, Shift Register
• For a parallel-in, serial-out, shift register,
the data bits are entered simultaneously
into their respective stages on parallel lines,
but the data bits are transferred out of the
register serially, i.e. on a bit-by-bit basis
over a single line.
90Shift/Load
CLK 0-
QA
D, Q₁
FF₁
G₁ G₁
Shift/Load
OB
CLK
D₂ Q₂
FF₂
(a) Logic diagram
A
G₁ G₂
OC
B IC D
D3 Q3
FF 3
SRG4 Data out
95
G G₂
(b) Logic symbol
Figure 11.8 A 4-bit parallel-in, serial-out, shift register.
D₂ Q₁
FF₁
91There are four data lines A, B, C, and D through which the
data is entered into the register in parallel form. The signal Shift/LOAD
allows (a) the data to be entered in parallel form into the register and
(b) the data to be shifted out serially from terminal Q4.
When Shift/LOAD line is HIGH, gates G₁, G2, and G3 are disabled, but
gates G4, G5, and G6 are enabled allowing the data bits to shift-right
from one stage to the next. When Shift/LOAD line is LOW, gates G4, G5,
and G6 are disabled, whereas gates G₁, G2, and G3 are enabled
92●
●
There are four data lines A, B, C, and D through which the data is entered into
the register in parallel form.
The signal Shift/Load allows (a) the data to be entered in parallel form into the
register and (b) the data to be shifted out serially from terminal Q4.
• When Shift/Load line is high, gates G1, G2, and G3 are disabled, but gates G4,
G5, and G6 are enabled allowing the data bits to shift-right from one stage to
the next.
●
• When Shift/Load line is low, gates G4, G5, and G6 are disabled, whereas gates
G1, G2, and G3 are enabled allowing the data input to appear at the D inputs of
the respective FFs.
●
●
• When a clock pulse is applied, these data bits are shifted to the Q output
terminals of the FFs and, therefore, data is inputted in one step.
The OR gate allows either the normal shifting operation or the parallel data
entry depending on which AND gates are enabled by the level on the Shift/Load
input.
93Parallel-in, Parallel-out, Shift Register
CLK
D
Q
QA
D
QB
D
Q
OD
5 Qo
Q
OQD
• In a parallel-in, parallel-out, shift register, the data is
entered into the register in parallel form, and also the
data is taken out of the register in parallel form.
94• Data is applied to the D input terminals
of the FFs.
●
• When a clock pulse is applied, at the
positive-going edge of that pulse, the D
inputs are shifted into the Q outputs of
the FFs.
•The register now stores the data. The
stored data is available instantaneously
for shifting out in parallel form.
95Bidirectional Shift Register
A bidirectional shift register is one in which the data bits can
be shifted from left to right or from right to left.
D₁₂0
Right/Lefto o
CLKO-
G₁ G₂
D₁ Q₁
FF₁
G₂ G
D₂ Q₂
FF₂
G₂ G₂
G₂₁
D₂ Q₁
FF3
G₁ G₂
G₁
D₁ Q₁
FF
Figure 11.10 Logic diagram of a 4-bit bidirectional shift register.
96Figure shows the logic diagram of a
4-bit serial-in, serial-out, bidirectional
(shift-left, shift-right) shift register.
•Right/Left is the mode signal.
When Right/Left is a 1, the logic circuit
works as a shift-right shift register.
When Right/Left is a 0, it works as a
shift-left shift register.
97●
A high on the Right/Left control input enables the AND gates G1,
G2, G3, and G4 and disables the AND gates G5, G6, G7, and G8,
and the state of Q output of each FF is passed through the gate
to the D input of the following FF.
●
When a clock pulse occurs, the data bits are then effectively
shifted one place to the right.
●
A low on the Right/Left control input enables the AND gates G5,
G6, G7, and G8 and disables the AND gates G1, G2, G3, and G4,
and the Q output of each FF is passed to the D input of the
preceding FF.
• When a clock pulse occurs, the data bits are then effectively
shifted one place to the left. Hence, the circuit works as a
bidirectional shift register.
98Universal Shift Registers
• A Universal shift register is a bidirectional register, whose
input can be either in serial form or in parallel form and
whose output also can be either in serial form or in
parallel form.
99Clear
CLK
$₁
So
Serial
input for
shift-right
FF₁
D
4x1
MUXA
13 2 10
FF3
D
4x1
MUX₂
13 2 10
½
Parallel outputs
FF₂
D
4x1
MUX₂
13210
1₁
C
FF₁
A₁
D
4x1
MUX₁
132 10
Serial
input for
shift-left
100A universal shift register can be realized
using multiplexers.
Table 11.1 Function table for the register of Figure 11.11
Mode control
S₁
0
0
1
So
0
1
0
1
Register operation
No change
Shift right
Shift left
Parallel load
101• It consists of four D flip-flops and four multiplexers.
The four multiplexers have two common selection inputs S1 and SO.
●
●
●
●
Input 0 in each multiplexer is selected when S1S0 = 00, input 1 is selected when S1S0 = 01,
and input 2 is selected when S1S0 = 10 and input 3 is selected when S1S0 = 11.
●
The selection inputs control the mode of operation of the register according to the function
entries in Table 11.1.
When S1S0 = 0, the present value of the register is applied to the D inputs of flip-flops.
This condition forms a path from the output of each flip-flop into the input of the same
flip-flop.
• When S1S0 = 01, terminal 1 of the multiplexer inputs have a path to the D inputs of the
flip-flops. This causes a shift-right operation, with the serial input transferred into flip-flop
FF4.
The next clock edge transfers into each flip-flop the binary value it held previously, and no
change of state occurs.
When S1S0 = 10, a shift-left operation results with the other serial input going into flip-flop
FF1.
Finally when S1S0 = 11, the binary information on the parallel input lines is transferred into
the register simultaneously during the next clock edge.
102Applications of Shift Registers
•1. Time delays:
•2. Serial/ Parallel data conversion:
• Ring counters:
103COUNTERS
• A digital counter is a set of flip-flops (FFs) whose states
change in response to pulses applied at the input to the
counter.
• The FFs are interconnected such that their combined
state at any time is the binary equivalent of the total
number of pulses that have occurred up to that time.
•le, A counter is used to count pulses.
104• 1. Asynchronous Counters (Ripple Counters)
• 2. Synchronous Counters
Asynchronous Counters
Asynchronous counters are also called ripple counters.
• In ripple counters, the FFs within the counter are not made to change the
states at exactly the same time. This is because the FFs are not triggered
simultaneously.
• The clock does not directly control the time at which every stage changes state.
Asynchronous counter uses T FFs to perform a counting function.
Ripple counters are also called serial or series counters.
●
●
●
Types of Counters
●
105Synchronous Counters
• Synchronous counters are clocked such that each FF in
the counter is triggered at the same time.
• This is accomplished by connecting the clock line to
each stage of the counter.
• Synchronous counters are faster than asynchronous
counters, because the propagation delay involved is
less.
106Comparison of synchronous and
asynchronous counters
Table 12.1 Synchronous versus asynchronous counters
Asynchronous counters
Synchronous counters
between the output of first FF and clock input
of next FF and so on.
1. In this type of counter FFs are connected in 1. In this type of counter there is no connection
such a way that the output of first FF drives
the clock for the second FF, the output of the
second the clock of the third and so on.
2. All the FFs are not clocked simultaneously.
3. Design and implementation is very simple even
for more number of states.
4. Main drawback of these counters is their low
speed as the clock is propagated through a
number of FFs before it reaches the last FF.
2. All the FFs are clocked simultaneously.
3. Design and implementation becomes tedious
and complex as the number of states increases.
4. Since clock is applied to all the FFs
simultaneously the total propagation delay is
equal to the propagation delay of only one FF.
Hence they are faster.
107Up Counter
• A counter may be an up-counter or a down-counter. An
up-counter is a counter which counts in the upward
direction, i.e. 0, 1, 2, 3,..., N.
• Down Counter
• A down-counter is a counter which counts in the
downward direction, i.e. N, N − 1, N − 2, N – 3, ..., 1, 0.
●
State
Each of the counts of the counter is called the state of
the counter.
Modulus of the counter.
108●
In other words, the number of input pulses that causes the
counter to reset to its initial count is called the modulus of the
counter.
Since a 2-bit counter has 4 states, it is called a mod-4 counter.
●
It divides the input clock signal frequency by 4, therefore, it is
also called a divide-by-4 counter. It requires two FFs.
●
3
Similarly, a 3-bit counter uses 3 FFs and has 2³ = 8 states. It
divides the input clock frequency by 2³, i.e. 8.
• In general, an n-bit counter will have n FFs and 2n states, and
divides the input frequency by 2n. Hence, it is a divide-by-2n
counter.
109• The number of FFs required to construct a mod-N counter
equals the smallest n for which N = 2".
●
A mod-N counter divides the input frequency by N, hence, it is
called a divide-by-N counter.
●
Full modulus counter.
• A counter which goes through all the possible states before
restarting is called the full modulus counter.
Variable modulus counter.
• A counter in which the maximum number of states can be
changed is called the variable modulus counter.
Terminal count.
●
• The final state of the counter sequence is called the terminal
count.
110Asynchronous
Counters
•Two-bit Ripple Up-counter Using Negative
Edge-triggered Flip-Flops
•The 2-bit up-counter counts in the order 0, 1, 2, 3, 0, 1,
….., i.e. 00, 01, 10, 11, 00, 01,..., etc.
01
J₁₁ Q₁
oto FF₁
CLK
K₁₁
Q₁
J₂ Q₂
FF₂
K₂ Q₂
(a) Logic diagram
CLK
Q₁_0
Q₂
0
1 0
1
1 0 1
(b) Timing diagram
0
111●
●
●
Figure shows a 2-bit ripple up-counter, using negative
edge-triggered J-K FFs, and its timing diagram.
The counter is initially reset to 00.
When the first clock pulse is applied, FF1 toggles at the
negative-going edge of this pulse, therefore, Q1 goes from low
to high.
This becomes a positive-going signal at the clock input of FF2. so,
FF2 is not affected, and hence, the state of the counter after one
clock pulse is Q1 and Q2 = 0, i.e. 01.
=
●
At the negative-going edge of the second clock pulse, FF1
toggles. So, Q1 changes from high to low and this negative-going
signal applied to CLK of FF2 activates FF2, and hence, Q2 goes
from low to high. Therefore, Q1 = 0 and Q2 = 1, i.e. 10 is the
state of the counter after the second clock pulse.
112At the negative-going edge of the third clock pulse, FF1
toggles. So Q1 changes from a 0 to a 1. This becomes a
positive-going signal to FF2, hence, FF2 is not affected.
Therefore, Q2 = 1 and Q1 = 1, i.e. 11 is the state of the
counter after the third clock pulse.
●
At the negative-going edge of the fourth clock pulse, FF1
toggles. So, Q1 goes from a 1 to a 0. This negative-going
signal at Q1 toggles FF2, hence, Q2 also changes from a
1 to a 0. Therefore, Q2 = 0 and Q1 = 0, i.e. 00 is the state
of the counter after the fourth clock pulse.
• For subsequent clock pulses, the counter goes through
the same sequence of states. So, it acts as a mod-4
counter with Q1 as the LSB and Q2 as the MSB. The
counting sequence is thus 00, 01, 10, 11, 00, 01,..., etc.
113Two-bit Ripple Down-counter Using
Negative Edge-triggered Flip-Flops
CLK
Jy Q₁
OFF₁
K₁ Q₁
J₂ Q₂
FF₂
K₂ Q₂ -
CLK
ww
Q₁ 0 10
Q₁101010
Q₂0
0
(a) Logic diagram
(b) Timing diagram
A 2-bit down-counter counts in the order 0, 3, 2, 1, 0, 3,...,
i.e. 00, 11, 10, 01, 00, 11, ..., etc.
114Two-bit Ripple Up-down Counter Using Negative
Edge-triggered Flip-Flops
M
CLK
01
J₁ Q₁
K₁
FF₁
Q₁
√₂
K₂
FF₂
Q₂
Q₂
115An up-down counter is a counter which can count
both in upward and downward directions.
An up-down counter is also called a forward/
backward counter or a bidirectional counter.
• A control signal or a mode signal M is used to choose
the direction of count.
When M = 1 for up counting, Q1 is transmitted to
clock of FF2 and when M = 0 for down counting, 1 is
transmitted to clock of FF2
116Two-bit Ripple Up-counter Using
Positive Edge-triggered Flip-Fops
ㅎ
CLK
0
J₁ Q₁
-K₁ Q₁
FF₂
K₂ Q₂
(a) Logic diagram
w
Q₁0 1 0
CLK
[
Q₂0
Q₁1010
1
1
0
(b) Timing diagram
0
0
117The output of the first FF is connected to the clock
of FF2.
●
• The external clock signal is applied to the first flip-flop
FF1.
The FF1 toggles at the positive-going edge of each
clock pulse and FF2 toggles whenever changes
from a 0 to a 1.
State transitions occur at the positive-going edges of
the clock pulses.
•The counting sequence is 00, 01, 10, 11, 00, 01, ...,
etc.
118Two-bit Ripple Up/ Down Counter Using
Positive Edge-triggered Flip-Flops
Mo-
CLK 0-
J₁ Q₁
K₁
FF₁
√₂
K₂
Q₂
Q₂
When M = 1 for up co Q1 ng,
is transmitted to the clock of
FF2 and when M = 0 for down counting, Q1 is transmitted to the
clock of FF2.
119Design of Asynchronous
to design an asynchronous counter, first write the
counting sequence, then tabulate the values of reset
signal R for various states of the counter and obtain
the minimal expression for R or using K-map
• Provide a feedback such hat R or resets all the FFs
after the desired count.
120Design of a Mod-6 Asynchronous
Counter Using T FFs
●
A mod-6 counter has six stable states 600, 001, 010, 011, 100, and 101.
●
When the sixth clock pulse is applied, the counter temporarily goes to 110 state,
but immediately resets to 000 because of the feedback provided.
• It is a 'divide-by-6 counter', in the sense that it divides the input clock frequency
by 6.
• It requires three FFs, because the smallest value of n satisfying the condition
N<= 2n is n = 3; three FFs can have eight possible states, out of which only six
are utilized and the remaining two states 110 and 111, are invalid.
• If initially the counter is in 000 state, then after the first clock pulse it goes to
001, after the second clock pulse, it goes to 010, and so on. After the sixth clock
pulse, it goes to 000.
121CLK
Q₁
Q₂
Q3
R
4₁.
T₁
Q.
FF₁
CLK
*************
CLR
andparann.
T₂
(b) Timing diagram
FF₂
CLR
Q₂
(a) Logic diagram
T3
FF3
CLR
Q3
0
1
2
3
4
5
6
SIR
State
After
pulses Q3 Q₂ Q₁
010
R
0 0
0 0
0 1
0
1
1
1
0
0
1 0
1
1 1 0
↓
↓↓
0 0 0
0
700 10
(c) Table for R
OOOO
0
0
0
ooor
0
0
0
1
122For the design, write a truth table (Figure 12.7c) with the present
state outputs Q3, Q2 and Q₁ as the variables, and reset R as the output
and obtain an expression for R in terms of Q3, Q2 and Q₁. That decides
the feedback to be provided. From the truth table, R = Q3Q2. For
active-LOW reset, is used. The reset pulse is of very short duration, of
the order of nanoseconds and it is equal to the propagation delay time
of the NAND gate used. The expression for R can also be determined as
follows.
R=0 for 000 to 101, R = 1 for 110, and R = X for 111
Therefore,
R=Q3Q2 1 +Q3Q2Q1-Q3Q2
123Design of a Mod-10 Asynchronous Counter
Using T FFs (BCD/Decade)
A mod-10 counter is a decade counter.
• It is also called a BCD counter or a divide-by-10
counter.
It requires four FFs (the smallest value of n satisfying
the condition 10 <=2", is n = 4). So, there are 16
possible states, out of which ten are valid and the
remaining six are invalid.
The counter has ten stable states, 0000 through 1001,
i.e. it counts from 0 to 9. The initial state is 0000 and
after nine clock pulses it goes to 1001.
124CLK
T₁
After
pulses
012
0
2
3
4567890
10
FF₁
CLR
Q₁
Count
Q4 Q3 Q₂ Q₁
$2
0 0
0
0
00
oooOTTI
0
0
0
0
1
1
01100100
(a) Count table
T₂
OTOT
0
0
1
0 1
1 0
1 0 0
0000
CLR
0
1
0
1
0
1
0
1
Q₂
FF 2
Q₂
Q₂Q₁
Q4Q3 00 01 11 10
0
3
2
00
01
11 X
10
Q₂
FF3
CLR
4
12 13
X
5
8
9
15 14
X
11
X
(b) K-Map
x
1
6
10
CLR
Q4
FFA
Q₁
(c) Logic diagram
Figure 12.8 Asynchronous mod-10 counter using T flip-flops.
SIR
125From the K-map, R = Q4Q2. So, feedback is
provided from second and fourth FFs. For active-HIGH reset, Q4Q2 is
applied to the CLEAR terminal. For active-LOW reset, Q4Q is connected
to CLR of all the FFS.
126Synchronous Counters
• Asynchronous counters are serial counters. They are
slow because each FF can change state only if all the
preceding FFs have changed their state. The
propagation delay thus gets accumulated,
• Synchronous counters are counters in which all the FFs
are triggered simultaneously (in parallel) by the
clock-input pulses.
Since all the FFs change state simultaneously in
synchronization with the clock pulse, the propagation
delays of FFs do not add together (as in ripple
counters) to produce the overall delay.
127Design of Synchronous
• For a syCounters in of synchronous counters, the
following procedure is used.
Step 1. Number of flip-flops:
Step 2. State diagram: (A state diagram, which can also be
called the transition diagram, is a graphical means of
depicting the sequence of states through which the
counter progresses.)
Step 3. Choice of flip-flops and excitation table:
Step 4. Minimal expressions for excitations:
128The excitation tables of various
flip-flops used in the counters
PS
Q₁
0
0
1
1
PS
Q₁
0
0
1
1
NS Required inputs
Q₁+1
S
R
0
0
1
1
0
0
1
X
(a) S-R FF excitation table
NS
Q+l
0
1
0
1
0
1
0
1
хо
Required input
D
(c) D FF excitation table
1
0
PS
Q₁
0
0
1
1
PS
-11
0
0
1
1
NS
Qntl
0
1
0
1
Required inputs
J
K
NS
Qn+1
0
1
0
1
0
1
X
X
(b) J-K FF excitation table
Required input
T
0
1
1
0
X
X
1
0
(d) T FF excitation table
129Design of a Synchronous 3-bit Up
Counter Using J-K FFs
Step 1. Determine the number of flip-flops required: A 3-bit up-counter
requires 3 flip-flops. The counting sequence is 000, 001, 010, 011, 100,
101, 110, 111, 000 ...
Step 2. Draw the state diagram: The state diagram of the 3-bit up-
counter is drawn as shown in Figure 12.16a.
Step 3. Select the type of flip-flops and draw the excitation table: JK flip-
flops are selected and the excitation table of a 3-bit up-counter using J-
K flip-flops is drawn as shown in Figure 12.16b.
Step 4. Obtain the minimal expressions: From the excitation table it is
seen that, J1 = K₁ = 1, because all the entries for J₁ and K₁ are either a 1
or an X. The K-maps for excitations based on the excitation table and
the minimal expressions for excitations J3, K3, J2, and K2 in terms of
the present outputs Q3, Q2, and Q1 obtained by minimizing the K-
maps are shown in Figure 12.17.
Also observing the up counting sequence, we can conclude that Q1
changes state for every clock pulse. So FF1 has to be in toggle mode.
Therefore J1 K1
1. Q2 changes state whenever Q₁ is 1, i.e. FF2
toggles whenever Q1 is 1. Therefore J2 K2 Q1. Q3 changes state
whenever Q2 = 1 and Q1 = 1; that means, FF3 toggles whenever Q1 Q2
= 1. Therefore J3 = K3 = Q1 Q2.
130
=
=
=
=110
101
100
111
011
000
001
010
(a) State diagram
PS
Q3 Q2 Q1
ㅇㅇㅇ
001
010
011
100
101
1 10
1 1 1
NS
Q3 Q2 QP
001
010
0 1 1
100
101
1 10
1 1 1
ㅇㅇㅇ
Required excitations
Jo Ky Us K2
J3 K3
2 Ke Ji Ky
0 x 0 x
0 x
1x
0 x x 0
1 x
x 0
x 0
x 0
x 1
(b) Excitation table
x
0
1
x
x
1
x
x
0
1
x 1
1 x
x 1
x 1
1 x
x 1
131Q₂Q₁
0
1 x
Q₂Q₁
0
1
Figure 12.16 A 3-bit up-counter.
Q₂Q₁
00 01
0
4
11 10
3
5
7
X X X
J₂ = Q₂Q₁
00 01 11 10
3
1 X
1 X
X
X
2
61
6
0 X
1
Q₂Q₁
00
1
0 X
0
X
4
01
X
00 01
0
X
1
X
5
K₂=Q₂Q₁
11 10
3
5
X
11
1
1
K₂=Q₁
X
10
6
J₂ = Q₁
Figure 12.17 Karnaugh maps for a 3-bit up-counter.
132Design of Synchronous 3-bit
Down-counter
110
101
100
111
011
000
001
010
(a) State diagram
PS
Q3 Q₂ Q₁
000
1 1 1
110
101
100
011
010
001
NS
Q3 Q₂ Q₁
1 1 0
101
100
Required excitations
Jz Kz J₂ K₂ J₁ K₁
1 x
1 x
0
x 1
010
001
000
x 0
x 0
x 0 0
x 1
0 x
0 x
0 x
(b) Excitation table
Figure 12.18 A 3-bit down-counter.
x
x
0
x 1
0 x
1 x
x 1
1 x
x 1
1 x
x 1
133Q₂Q₁
2,
0 1
1
00 01 11
1
0
X
Q₂Q₁
00
1
O
O
4
X
5
01
X
J₂ = Q₂Q₁
5
3
7
1 3
X
10
11 10
X
X X
X
2
6
2
6
Q₂Q₁
0 X
Q₂Q₁
00
1
0 x
10
00
0
4
01 11 10
1
3
X
01
X
5
K₂=Q₂Q₁
X
1
X
5
7
11
3
7
X
10
1
1
2
6
J₂ = Q₁
K₂=Q₁
Figure 12.19 K-maps for a three-bit down counter using J-K FFs.
1343-bit
Design of a Synchronous
Up-down Counter Using J-K FFs
000
111
110
101
0 0
0
001
0
010
011
100
PS Mode
(a) State diagram
Q3 Q₂ Q₁
2
0 1 0
0 1
0
0 1 1
0 1 1
1 X
000
000
001
0
1
1 1 1
001
0 X
0 0 1 0 0оо ох
0 0 1
1
0 1 0
0 x
0 x
0x
0
X
х
1
x
x
1
x 0
x 0
X
x 0
x 0
x 0
x 0
NS
M Q3 Q₂ Q₁ J3 K3 J₂ K₂
2
01
0
1
0
1 0 0
0 1 1
1 0 1
1 0 0
1 1 0
1 0 1
1 1 1
1 1 0
000x1
(b) Excitation table
Figure 12.13 Synchronous 3-bit up-down counter.
1
0 0
1 0 0
1
0 1
1 0 1
1 1 0
1 1 0
1 1
1
1 1 1
0
1
0
1
Required excitations
0
1
0
1
0
0 0 1
0 1 1
1
0
1
1 X
0 x
0 x
1 x
x 1
x0
х 0
x 1
1
X
0
x
0x
1 x
x 1
x 0
x 0
X
X 1
J₁ K₁
1 X
1 X
X 1
1
X
X
X 1
X
1
1
X 1
1
X
1
X
X 1
X 1
1 X
1 X
X 1
X
1
135Q₁M
Q3Q₂
Q3Q₂
01
00 1
Q₁M
10 X
00 1
01
8
00₁
X
12
13
11 x X X
11 x
10 1
0
4
O
01
8
Xx
00 01 11
5
9
11 10
3
1
5
X X
9
J3 = Q₂Q₁M+Q₂Q₁M
15
11
L
12 13 15
X X
7
11
X
X
J₂ = Q₁M+Q₁M
10
3 2
X
X
14
2
10
6
14
9
10
Q₁M
Q₂Q₂ 00₁
01 11
1
00 X X X
01 X
11
8
10 1
Q₁M
Q₂Q₂
00 X
01 1
A
11 1
10 x
X
12 13
00 01 11
12
8
5
x
9
X
K₂=Q₂Q₁M+Q₂Q₁M
5
X
13
1
9
X
1
1
3
X
11
3
10
15 14
15
X
11
2
10
K₂ = Q₁M + Q₁M
6
10
X
X
2
6
14
10
136CLK
FF₁
Q₁
FF₂
K₂ Q₂
FF₁
K₂ ₂
Figure 12.15 Logic diagram of the synchronous 3-bit up-down counter using J-K
137Design of a
Modulo-10
• tes inige Turates of flip-flops:
Synchronous
up/ down Counter
• A modulo-10 counter has 10 states and so it requires 4 FFs. (10
<= 24). 4-FFs can have16 states. So out of 16, six states (1010
through 1111) are invalid.
• The entries for excitations corresponding to invalid states are
don't cares.
• For selecting up and down modes a control or mode signal is
required. Let us say it counts up when the mode signal M = 1
and counts down when M = 0.
• The clock signal is applied to all the FFs simultaneously.
1380000
1001
1000
0111
0110
0
10 0
0 0
10 0
10 0
0
0001
0010
0011
0100
0101
(a) State diagram
1
1
PS
Ол аз Q2 Q1
0
0 0 0
0
0 0
0
0001 0
0001
0010 0
0010 1
0011
0 0 1 1
0100
0100
0101
0101
0110
0 1 1 0
0
1
1
1
0 1 1 1
100
0
1 0 0 0
Mode
M
1001
1001
0
-о
1
0
1
0
1
0
0
1
0
1
0
1
0
1
NS
Q4 Q3 Q3 Q1
10
0
0
0 0
0 0
оо
0001
оо
0011
0 0 10
0 1 0 0
0 0
1 1
0 1
0 1
0
0
0 1 1 0
01
01
0 1
1 1
0 1
1 0
01
0
01
0 0
10
01
0
1000
01 1
1
1 0 0 1
1000
0 0 0 0
(b) Excitation table
Required excitations
та Тз
T,
T2
1 0
0
0
0 0
0 0
0 1
0
1
0
1
1 1
1 1
01
0 1
1 1
1 1
0 1
00
0 0
0 0
01
0
1
0 0
0 0
0 0 1
0 0
1
0 0
0 0
1
1
1 1
0 0
0
0
1
0 0
01
1
1
T1
01
01
1
1
0
0
1
1
1
1
1
139Q₁M
Q₂Q₂2 00 01 11
00 1
01
11
10
Q₁M
Q₂Q₂
00
01
11
10
+
12
8
1
4
12
0
8
13
9
0
00 01 11
0
1
5
13
9
1
3
15
1
11
3
7
15
10
11
N
6
14
10
10
2
6
14
Q4Q,M
Q₂Q₂
10
00
00
11
1
1
01 X
T4=Q4Q₁M+Q3Q₂Q₁M+Q₂Q₂Q₁M
Q4Q,M
Q3 Q₂
X
00 1
00
10 X
01 x
20
11 x
16
10 x
28
16
20
01 11
17
28
X
X
24 25
X
21
29
X
1
21
X
X
29
25
T₂ = Q₂Q₁M+Q₂Q₁M + Q₂Q₂Q₁M
1
X
X
X
X
X
19
X
23
31
1
01 11 10
17
19
18
27
23
31
27
10
T2 = Q401 M +4Q1M + Q2°1M + Q301 M
18
22
X
30
X
26
X
22
X
30
X
26
X
140T4 = m(0, 15, 16, 19) + d( 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
31)
T3 = m(7, 8, 15, 16) + d( 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
31)
T2 Om(3, 4, 7, 8, 11, 12, 15, 16) + d ( 20, 21, 22, 23, 24, 25, 26, 27,
=
28, 29, 30, 31)
141CLK
0-
QQ,M.
Q₂QM
Q₂QM-
Q₂QM
T₁ Q₁
FF₁
Q₂Q₂QM-
Q,Q,M-
Q₂Q₁M-
T₂ Q₂
FF₂
ā₂
Q₂ Q₂QM-
Q₂Q,M
Q₂Q₂QM
T3 Q₂
FF₁
FF₁
142Home Work
• 1. Design a Modulo-9 Synchronous
Counter Using T FFs.
•2. Design of a Synchronous Mod-6
Counter Using J-K FFs
143Design of a Synchronous Modulo-6
Gray Code Counter
000
000
001
011
00*
111 110 010
(a) State diagram
PS
Qz Q₂ Q₁
000
001
011
010
1 1 0
1
NS
Qz Q₂ Q₁
001
011
010
1 1 0
1 1 1
000
Required Excitations
T3 T₂ T₁
0 0 1
0
1 0
0 0
1
1 0 0
0 0 1
1
1
1
(b) Excitation table
144Q₂Q₁
0
00 01 11 10
이
1 XX1
T₁=0,0₁ +0,0,0
Q₂Q₁
0
00 01 11 10
2
151
1 XX
T₂=0,0₁ +0,0₁
Q₂Q₁
0
00 01 11 10
2
X X
6
T₁=Q₂ +0,0₁ +0,0,
145Q₂
Q₂Q₁
Q₂Q₁
Dr
CLK
0
D
Q₂Q₁
Q₂Q₁-
T₁ Q₁
FF₁
Q₁
Q₂Q₁
Q₂Q₂Q₁-
D
T₂ Q
FF₂
T3 Q3
FF₁
Q3
146Design of a Synchronous
Modulo-10 Gray Code Counter
PS
NS
Required Excitations
2
Q4 Q3 Q₂ Q₁ Q4 Q3 Q₂ Q₁ T4 T3 T₂ T₁
00000001 00 0 1
00010011
0010
0
0 0 1 1
0 0 1 0
0 0
1
0 0 1 0
0 1 1 0
0 1 0 0
0 1 1 1
0 0
0
1
0 1 1 0
0 1 1 1
0 1 0 1
0 1 0 1
0 0
1 0
0 1 0 0
0 0
0
1
0 1 0 0
1 1 0 0
1 0 0 0
1 1 0 0
1 1 0 1 0 0 0 1
11010000 1 1 01
(a) State diagram
(b) Excitation table
Figure 12.29 Synchronous mod-10 Gray code counter.
0000 0001 0011 00100110
1101 1100 0100 0101
0111
147Q₂Q₁
Q₂Q3
00
01 1
11
10
Q₂Q₁
Q₂Q3
00
01
11
00 01 11 10
2
10
X
12
8
X
1
4
12
X
00 01
1
X
5
13
9
5
IX
13
X
T₁ = Q₂Q₁ + Q₂Q₂Q₂Q₁
X
@
11
X
7
15
11
3
7
X
15
X
X
14
10
X
6
10
6
14
T₂=Q₂Q₂Q₁ +Q₂Q₂Q₁
10
Q₂Q₁
Q₂Q3
00
01
11
10
00
01
Xx
4
12 13
1
8
1
01
Q₂Q₁
Q₂Q3 00 01
00 1
4
12
5
9
X X
1
1
8
10 x X
11
13
X
T₂ = Q₂Q₁ +Q₂Q₂Q₁
9
3
X
7
X
15
11
10
1
11 10
X
11
1
2
X
6
14
15 14
X
10
10
T₁ = Q₁ +Q₂Q₂Q₁ + Q₂Q₂Q₁
+ Q3Q₂Q₁ + Q3Q₂Q₁
148.'o
סיסיסי
Q₂Q₂Q₁
·¹0²080
Q₂Q₂Q₁
CLK
0-
-10²0²0
D₁ D
סיסיסי-
T₁ Q₁
FF₁
סיסיסי-
T₂ Q₂
FF₂
Q₂
D
-10'0
-10 ²0²0 ²0
T3 Q3 -
FF₁
T₁ Q₁
FF₁
āt
149Design of a Synchronous BCD
Counter Using J-K FFs
0000
1001
PS
Q4 Q3 Q₂ Q₁
2
0 00 0
0 0 0 1
001 0
0 01
0
0
100
101
1 1 0
0
0
1
1 1 1
000
1 001
0001 0010 0011
1000 (0111 0110) 0101
(a) State diagram
Required excitations
J4 K4 J3 K3 J₂ K₂ J₁ K₁
0 x
0 x
1
0 x
1
0 x
x
0 x
x
0 x
0
0 x
1
0 x
1 x
x 0
X 1
(b) Excitation table
Figure 12.32 Synchronous BCD (mod-10) counter.
0100
NS
Q4 Q3 Q₂ Q₁
000 1
001 0
001 1
0 100
0101
0110
01 1 1
1 0 0 0
1 00 1
0000
X
0 x
0 x
1 X
x 0
x
0
x
0
x
1
0 x
0 x
X
0
1
x
X
x 0
x
0 x
0 x
X X X X X
x - x - x - x - x .
X
X
1
X
X
1 x 1
X
1
150Q₂Q₁
Q₂Q3 00 01 11
0
3
00
01
11
10
Q₂Q₁
Q₂Q₂
00
01
11
10
X
X
4
12
X
8
4
12
8
X
X X
00 01 11
0
1
5
هـ
1
13 15
9
J₁ = Q3Q₂Q₁
X
→
5
13
X
9
X
X
X
11
X
3
7
15
11
10
X
X
X
10
X
X
X
2
14
10
2
6
14
10
Q₂Q₁
Q₂Q3
00
01
11
10
Q₂Q₁
Q₂Q3
01
00 01 11
11
X
X
X
00 X
00
X
X
10 X
4
12
81
0
4
12
8
X
5
X X
13
X X
1
X
9
K₁=Q₁
X
X
5
X 1
13
X X
9
3
X
15
11
7
15
10
11
X
01 11 10
3 2
1
X 1
X
X
X
X
2
X
6
14
10
6
14
10
Q₂Q₁
Q4Q3 00 01 11
00
01
11
10
Q₂Q₁
Q4Q3
01
11
X
00 X
10
X
X
0
X
12
8
4
12
X
8
13
X X
9
X
X
X
J3 = Q₂Q₁
13
X
9
00 01 11 10
0
1
3
2
X X
1
15
X
11
X
15
10
11
X
X
X
x
X
2
X
14
10
61
14
10
J₂ = Q₂Q₁
K₂=Q₁
K₂=Q₂Q₁
Figure 12.33 K-maps for excitations of synchronous BCD counter using J-K flip-
151CLK
0
ㅎ
JQ
K, Q
2
2
FF2
№3
J
152Design a type T counter that goes
through states 0, 3, 5, 6, 0, 3, 5 ....
•Step 1. The number of flip-flops:
Three FFs can have 8 states, out of which states
000, 011, 101, 110 are valid and states 001, 010,
100, 111 are invalid. The entries for excitations
corresponding to invalid states are don't cares.
●
1530-6
5
१०,
0
00
1 X
0
(a) State diagram
01 11 10
11 3 2
X
X 1
5
X
T₂=Q₂
1
2
Q₂Q₁
01
PS
Qz Q₂ Q₁
00 01
0
1 X
000
011
101
110
X
5
NS
Q3 Q₂ Q₁
011
0
1
1
1
110 0
1
000 1 1
(b) Excitation table
11 10
3 2
1 x
Required excitations
T3 T₂
T₁
1X
1 X
T₂=1
Q₂Q₁
00 01
ol
01
1 X
X
1
0
1
0
11 10
X
T₁=Q₂
3 2
X
6
154CLK
T₁ Q
FF₁
Q₁-10-T₂ Q₂
FF₂
Q₁
2
Q₂
(a) Logic diagram
T₂ Q₂
3
FF₁
Q₂
155Question
• Design a type D counter that goes
through states 0, 1, 2, 4, 0, .... The
undesired (unused) states must always
go to zero (000) on the next clock pulse.
156Solution
Step 1. The number of flip-flops: This counter has only four stable
states 0, 1, 2 and 4 (000, 001, 010, 100), but it requires three FFs
because it counts 4 (100) as well. Three FFs can have eight states. So,
the remaining four states (011, 101, 110, 111) are undesired. These
undesired states must go to 000 after the next clock pulse. So, no
don't cares.
Step 2. The state diagram: The state diagram of the 0, 1, 2, 4, 0, ...
counter is drawn as shown in Figure 12.45a.
Step 3. The type of flip-flops and the excitation table: D flip-flops are
selected and the excitation table of the counter using D FFs is written
as shown in Figure 12.45b.
1575
6
PS
Q3 Q₂ Q₁
000
001
010
0 1 1
100
101
1 0
1 1
Required excitations
D3 D₂
001
0
0
0 1 0 0
1
100
000 0
000
000
000
000
1
1
NS
Q3 Q₂ Q₁
1 0
0
0 0
0
0
0
(a) State diagram
(b) Excitation table
Figure 12.45 Example 12.5: 0, 1, 2, 4, 0, ... counter.
OOO
0
0
0
D₁
1
0
0
0
0
000
Step 4. The minimal expressions: From the excitation table we can see
that no minimization is possible. So the expressions for excitations
read from the excitation table are:
D3 = 3Q2º1; D2 = 0302Q1; D1 = 30201
158CLK
0-
D₁
D₂
FF₂
Q₂
D₂ Q3
FF₁
Figure 12.46 Example 12.5: Logic diagram of type D counter
that goes through states 0, 1, 2, 4, 0,....
159Design a J-K counter that goes
through states 3, 4, 6, 7 and 3.....
(a) State diagram
PS
NS
Required excitations
Q3 Q₂ Qq Qz Qq Qq Jz Kz Jz K₂ Jq Kq
011
100
100
110
110
011
x 0
(b) Excitation table
1 x
x
0
0 x
1 x
x 0
160Q₂Q₁
0 X
1
Q4Q,
00 01 11
0
1
00
0 X
0
X
X 1
01
X
K₂ = Q₁
X
51 7
1
X
3
5
X X
11 10
3
J₁ = Q₂
10
7
X
X
2
6
Q₂Q₁
0 X
1
20,
00
1
X
00
0 X
X
0
0
01
X
X
1
X
5
X
K₂ = Q3
11
1
1
5
01 11 10
3
1
3
K₁ = Q₂
7
10
7
X
2
X
6
2
6
161CLK
0
J₁
FF₁
K₁ Q₁
FF₂
K₂
FF3
Figure 12.49 Example 12.3: Logic diagram of the J-K counter
that goes through states 3, 4, 6, 7, 3,....
162Shift Register Counters
One of the applications of shift registers is that they
can be arranged to form several types of counters.
●
Shift register counters are obtained from serial-in,
serial-out shift registers by providing feedback from the
output of the last FF to the input of the first FF.
• The most widely used shift register counters are
•1. Ring Counter
•2. Twisted Ring Counter (Johnson Counter)
163Ring Counter
1000
0001
2
3
4
5
6
7
(a) State diagram
(b) Sequence table
Figure 12.59 State diagram and sequence table of a 4-bit ring counter.
0010
Q₁ Q₂ Q3 Q4 After clock pulse
1000
0
01 00
1
0010
0001
1000
0100
0 1 0 0
00
0
0001
164CLK
D₁
FF₁
CLK
0-
Q₁
Q₁
J₁ Q₁
D₂ Q₂
FF₂
FF₁
K₁ Q₁
D3
FF3
J3
Q3
Q₂
Figure 12.57 Logic diagram of a 4-bit ring counter using D flip-flops.
D4
FF₂
FF3
K₂ Q₂ K₂ Q₂
FF
FF
Q₁
Q4
Q₁
Figure 12.58 Logic diagram of a 4-bit ring counter using J-K flip-flops.
165• Initially, the first FF is preset to a 1.
• So, the initial state is 1000, i.e. Q1 = 1,
Q2 = 0, Q3 = 0 and Q4 = 0.
●
After each clock pulse, the contents of
the register are shifted to the right by
one bit and Q4 is shifted back to Q1.
The sequence repeats after four clock
pulses.
166CLK
Q₁.
Q₂-
Q3"
HL
1
Figure 12.60 Timing diagram of a 4-bit ring counter.
167Twisted Ring Counter (Johnson
Counter)
• This counter is obtained from a
serial-in, serial-out shift register by
providing feedback from the inverted
output of the last FF to the D input of
the first FF.
The Q output of each stage is
connected to the D input of the next
stage, but the output of the la stage
Q
is connected to the D input of first
stage, therefore, the name twisted ring
counter.
168Q₁ Q₂ Q3 Q4 After clock pulse
0
1
2
3
4
5
6
7
8
9
(a) State diagram
(b) Sequence table
Figure 12.63 State diagram and sequence table of a twisted ring counter.
0011
0111
0001
1111
1110
0000
1100
1000
0000
1000
1 100
1 1 10
1 1 1 1
0 1 1
0011
0001
0000
1000
169CLK
0-
D₁ Q
FF₁
CLK
Q₁
J₁
Q₁
D₂
FF₁
K₁ Q₁
FF₂
Figure 12.61 Logic diagram of a 4-bit twisted ring counter using D flip-flops.
D₂ Q₂
FF3
J₂ Q₂
FF₂
K₂ Q₂
D₂ Q₁
FF₁
J3 Q3
FF 3
K₂ Q3
Q₁
J4 Q4
FF₁
K₁Q₁
Figure 12.62 Logic diagram of a 4-bit twisted ring counter using J-K flip-flops.
170ak wuuuuuu
CLK
Q₁
Q₂
Q3
Q₁
Figure 12.64 Timing diagram of a 4-bit twisted ring counter.
171