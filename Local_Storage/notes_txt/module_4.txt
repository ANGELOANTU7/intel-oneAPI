 Digital Electronics
(19-204-0302)Module - 4Syllabus - Module 4
• Memory and Programmable Logic:
Introduction to Programmable Logic
Devices, Read Only Memory,
Logic Arrays (PLA),
Array Logic (PAL)
Logic Families: Transistor Transistor
●
Programmable
Programmable
Logic(TTL), Emitter Coupled
Logic(ECL), MOSFET Logic, TTL Gates.●
Programmable logic devices (PLDs).
A programmable logic device is an IC that is user configurable
and is capable of implementing logic functions.
It is an LSI chip that contains a 'regular' structure and allows
the designer to customize it for any specific application,
• i.e. it is programmed by the user to perform a function
required for his application.
A PLD contains a large number of gates, flip-flops, and registers
that are interconnected on the chip.
The IC is said to be programmable because the specific
function of the IC for a given application is determined by the
selective breaking of some of the interconnections while
leaving others intact.
st
4Advantages of PLDs over fixed function ICs
1.
Low development cost
2. Less space requirement
3. Less power requirement
4. High reliability
5. Easy circuit testing
6. Easy design modification
High design security
7.
8. Less design time
9. High switching speed
5READ-ONLY
MEMORY (ROM)
• A read-only memory (ROM) is a memory device in
which permanent binary information is stored.
●
The binary information must be specified by the
designer and is then embedded in the unit to form
the required interconnection pattern.
Once the pattern is established, it stays within the
unit when the power is turned off and on again.
• As the name suggests it is meant only for reading
the information from it.
6• A ROM which can be programmed is called a
PROM.
• The process of entering information in a ROM
is known as programming.
ROMs can be used for designing
combinational logic circuits.
• Depending on the type of ROM used, a user
can design and modify the circuits easily.
7ROM ORGANIZATION
k inputs (address)
●
2^xn
ROM
Figure 8.1 ROM block diagram.
• It consists of k inputs and n outputs.
●
n outputs (data)
•
The inputs provide the address for the memory and the
outputs give the data bits of the stored word which is
selected by the address.
The number of words in a ROM is determined from the fact
that k address input lines are needed to specify 2k words.
8Io
1₁₁
1₂
13
14
5 x 32
decoder
1
2
3
28
29
30
31
A 32 x 8 ROM.
000000
A5
A4
Аз
Internal logic of a 32 x 8 ROM.
A7
A6
A₂
A₁
Ao• The unit consists of 32 words of 8 bits each.
• There are five input lines that form the binary numbers from 0
through 31 for the address.
●
●
The five inputs are decoded into 32 distinct outputs by means of a 5
x 32 decoder.
The 32 outputs of the decoder are connected to each of the 8 OR
gates.
Each OR gate must be considered as having 32 inputs.
Each output of the decoder is connected to one of the inputs of each
OR gate.
Since each OR gate has 32 input connections and there are 8 OR
gates, the ROM contains 32 × 8 = 256 internal connections.
10●
In general, a 2k x n ROM will have an internal k x
2k decoder and n OR gates.
Each OR gate has 2k inputs, which are connected
to each of the outputs of the decoder.
The 256 intersections in a 32 x 8 ROM are
programmable.
The programmable intersection between two lines
is called a cross point.
11L₁
0000
13
0
0
0
0
1
1
1 1
Inputs
ROM Truth Table
Table 8.1 ROM truth table (Partial)
1₂ 1₁ 10
0
0
0
1
1
0
1
1
0000
010-
0
0
1
1 1
A₁ A A₁ A₁
A4
1
0
1
1
010
00
1
0
0
1
1
1001
Outputs
0
1
0
Az
A3
A₂
0
1
1 1
1
0
1001
1
1
0 0
1
0
00
1 0
A₁ A₂
1
0
0
1
0
1
1
0
0
0
1
1
0
0
0
1
00110011
12●
The truth table shows the five inputs under which
are listed all 32 addresses.
At each address, there is stored a word of 8 bits,
which is listed under the outputs columns.
The table shows only the first four and the last
four words in the ROM.
The complete table must include the list of all 32
words.
13lo
1₁
12
13-
14
Programming a ROM
5 x 32
decoder
0
1
2
3
.
28
29
30
31
B
A₂
A6 A5 A₁ A3
A₂
A₁
Figure 8.3 Programming the ROM according to Table 8.1.
A
14●
●
The hardware procedure that programs the ROM results in
blowing fuse links according to the given truth table.
Every 0 listed in the truth table specifies a no connection and
every 1 listed specifies a path that is obtained by a
connection.
• For example, the table specifies the 8-bit word 10110010 for
permanent storage at address 3.
●
• The four Os in the word are programmed by blowing the fuse
links between output 3 of the decoder and the inputs of the
OR gates associated with outputs A6, A3, A2 and AO.
The four 1s in the word are marked in the diagram with a x to
denote a connection in place of a dot used for permanent
connection in logic diagrams.
15When the input of the ROM is 00011, all the
outputs of the decoder are 0 except for output 3,
which is at logic 1.
The signal equivalent to logic 1 at decoder output
3 propagates through the connections to the OR
gate outputs of A7, A5, A4 and A1.
The other four outputs remain at 0.
The result is that the stored word 10110010 is
applied to the eight data outputs.
16COMBINATIONAL
CIRCUIT
IMPLEMENTATION USING ROM
• The ROM is essentially a device that includes both the
decoder and the OR gates within a single device.
By choosing connections for those minterms that are
included in the function, the ROM outputs can be
programmed to represent the Boolean functions of the
output variables in a combinational circuit.
Each output terminal is considered separately as the
output of a Boolean function expressed as a sum of
minterms.
17●
A 32 X 8 ROM may be considered as a
combinational circuit with eight outputs, each
being a function of the five-input variables.
• Output A7 can be expressed in sum of
minterms as
A7( 1₁, 13, 12, 1₁, 10) = (0, 2, 3,..., 29)
3' '2' '1'
• A connection marked with x in the figure
produces a minterm for the sum.
18Question
●
• Design a combinational circuit using a ROM.
The circuit accepts a 3-bit number and
generates an output binary number equal to
the square of the input number.
19Solution
• The first step in the design is to derive the
truth table of the combinational circuit.
A₂
0
0
0
0
1
1
1
1
Inputs
A₁ Ap
0
0
1
1
0
0
1
1
0
1
0
1
0
1
0
1
Table 8.2 Example 8.1: Truth table for circuit
Outputs
Decimal
B₂ B₁ B₂ B₂ B₁ B
4
3
2
0
0
0
0
0
0
1
1
000
0
1
1
0
1
10000
1
00
000000-0
0000 o o o 0
0
0
0
101 OTO 10
0
0
0
1
4
9
16
25
36
49
Β, = Σ m(6, 7)
B = Σ m(4, 5, 7)
Β, = Σ m(3, 5)
Β, = Σ m(2, 6)
B₁ = 0
B = Em(1, 3, 5, 7) = A₁
20●
●
Three inputs and six outputs are needed to
accommodate all possible binary numbers.
Output B is always equal to input A; so there is
no need to generate B with a ROM since it is
equal to an input variable.
Output B1 is always 0, so this output is a
constant.
We actually need to generate only four outputs
with the ROM; the other two are readily obtained.
21The minimum size ROM needed must have three
inputs and four outputs.
Three inputs specify eight words, so the ROM must be
of size 8 x 4.
The three inputs specify eight words of four bits each.
The ROM truth table in Figure 8.4a specifies the
information needed for programming the ROM.
The block diagram of Figure 8.4b shows the required
connections of the combinational circuit.
22८०००
0
1
A₂ A₁ A₁ B5 B4 B3 B₂
MOOTTOOT
1
1
10
20TOTO-O-
1 1
1
1
1
ooo00o-
1
ܘܘܘܘ ܤ
BOOOTO
0
0
0
BOOT00
1
0
10
0 1
0 0
A₁-
A₁
8x4 ROM
1
0
1
1
(a) ROM truth table
(b) Block diagram
Figure 8.4 Example 8.1: ROM implementation.
A₂
0
Bo
B₁
B₂
B3
B₁
B₁
23Question
Obtain the logic implementation of a 32 × 4 bit
ROM using a decoder of a suitable size.
24●
●
Solution
●
A 32 x 4 bit ROM is to be implemented.
• It consists of 32 words of four bits each.
There must be five input lines that form the binary numbers from 0
through 31 for the address.
The five inputs are decoded into 32 distinct outputs by means of a
5 x 32 decoder.
Each output of the decoder represents a memory address.
The 32 outputs of the decoder are connected to each of the four OR
gates.
25lo
1₁
1₂-
13
14
5 x 32
decoder
0 1 2 3
28
29
30
31
A₂
A₁
Figure 8.5 Implementation of 32 x 4 bit ROM.
A3
Ao
26Question
Obtain the logic implementation of a 8 × 4 bit
ROM using a decoder of a suitable size.
27●
●
●
Solution
An 8 x 4 bit ROM is to be implemented.
It consists of eight words of four bits each.
There must be three input lines that form the binary numbers
from 0 through 7 for the address.
• The three inputs are decoded into 8 distinct outputs by means of a
3 x 8 decoder.
Each output of the decoder represents a memory address.
• The eight outputs of the decoder are connected to each of the
four OR gates.
Figure 8.6 shows the logic implementation of the 8 x 4 ROM using
a 3 x 8 decoder.
28Io
1₁
12
0
123 +569
3x8
decoder 4
7
A₂
A₁
Ao
Figure 8.6 Implementation of 8 x 4 bit ROM.
A3
29COMBINATIONAL PROGRAMMABLE LOGIC DEVICES
A combinational PLD is an integrated circuit with
programmable gates divided into an AND array and an
OR array to provide an AND-OR sum of products
implementation.
• There are three major types of combinational PLDs
and they differ in the placement of the programmable
connection in the AND-OR array.
●
The various PLDs used are
1. PALs (programmable array logics),
2. PLAs (programmable logic arrays) and
• 3. PROMs (programmable read only memories).
30Inputs
Inputs
Inputs
Programmable
OR array
(a) Programmable read-only memory (PROM)
Fixed AND array
(decoder)
Fixed
OR array
(b) Programmable array logic (PAL)
Programmable
AND array
Programmable
AND array
Programmable
OR array
(c) Programmable logic array (PLA)
Figure 8.7 Basic configuration of three PLDs.
→Outputs
Outputs
Outputs
31The programmable read-only memory (PROM) has a fixed
AND array constructed as a decoder and a programmable
OR array.
• The AND gates are programmed to provide the product
terms for the Boolean functions, which are logically
summed in each OR gate.
• The programmable array logic (PAL) has programmable AND
array and a fixed OR array.
The most flexible PLD is the programmable logic array (PLA)
where both the AND and OR arrays can be programmed.
The product terms in the AND array may be shared by any
OR gate to provide the required sum of products
implementation.
32●
PROGRAMMABLE
LOGIC ARRAY (PLA)
The PLA combines the characteristics of the
PROM and the PAL by providing both a
programmable OR array and a programmable
AND array,
• i.e. in a PLA both AND gates and OR gates have
fuses at the inputs.
3300-
Programmable
AND gates
B
Programmable
OR gates
Out₁ Outą Out3
Out4
34• Question
Show how the PLA circuit would be
programmed to implement the sum and carry
outputs of a full adder.
Solution
The truth table of a full-adder is shown in Figure 8.16a. Drawing the
K-maps for the sum and carry-out terms and minimizing them, the
minimal expressions for the sum and carry-out terms are:
The sum is
S=Cin + Bein + Aucin + ABCin
and the carry-out is
Cout= AB + ACin + BCin
To implement these expressions, we need a 4-input OR gate and a 3-
input OR gate. Since the inputs to the OR gates of the PLA can be
programmed, we can implement the given expressions as shown in
Figure 8.16c.Inputs
ABC
000
0 0 1
011
100
111
Outputs
SC
00
1 0
01
10
01
(a) Truth table
BC
00 01 11 10
0
1
BC
00 01 11 10
0
1
S-ABC + ABC + ABC + ABC Cout AC + BC + AB
(b) K-maps
36So
ABC
ABC
ABC
ABC
AB
AC
BC
S
(c) Implementation of full-adder
Cout
Unused
37Qn: Show how the PLA circuit can be programmed to
implement the 3-bit binary-to-gray conversion.
Binary
Gray
B3 B₂ B₁ G₂ G₂ G₁
00 000
1
0
01 1
10
0
1 0 1
1 101
1
1 1
(a) Conversion table
0 0
0 1
00
0 1
1 1
1
0
1
0
1
1
0 1
100
0
0
0
1
1
B₂B₁
B3
0
1
00 01
0
1
4
1
1
5
11 10
3
1
G₂ = B3
B₂B₁
B3
0
7
1
1
00
0
2
6
01
|-
1
5
B₂B₁
B3
0
11
3
00
0
1 1
G₁ = B₂B₁ + B₂B₁
(b) K-maps
10
01
2
8
1
5
11
1
3
G₂ = B₂B₂+ B₂B₂
7
10
1
2
38B₁
(c) Implementation
B3
B₂B₂
B₂B2
B₂B₁
B₂B₁
G3
G₂
G₁
39PLA
Programming Table
The fuse map of a PLA can be specified in a tabular
form.
The PLA programming table consists of three columns.
• The first column lists the product term numerically.
• The second column specifies the required paths
between inputs and AND gates.
The third column specifies the paths between the AND
and OR gates.
40●
●
●
●
●
For each output variable, we may have a T (for true) or C (for
complement) for programming the X-OR gate.
The product terms listed on the left are not part of the table;
they are included for reference only.
For each product term the inputs are marked with 1, 0, or -
(dash).
If a variable in the product term appears in its true form, the
corresponding input variable is marked with a 1.
If it appears complemented, the corresponding input variable is
marked with a 0.
If the variable is absent in the product term, it is marked as a -
(dash).
41• The paths between the inputs and the AND gates are
specified under the column heading inputs in the
programming table.
• A 1 in the input column specifies a connection from the
input variable to the AND gate.
• A 0 in the input column specifies a connection from the
complement of the variable to the input of the AND gate.
A - (dash) specifies a blown fuse in both the input
variable and its complement.
It is assumed that an open terminal in the input of an
AND gate behaves like a
42●
The paths between the AND and OR gates are specified under the column
heading outputs.
The output variables are marked with 1s for those product terms that are
included in the function.
Each product term that has a 1 in the output column requires a path from
the output of the AND gate to the input of the OR gate.
Those marked with a - (dash) specify a blown fuse.
It is assumed that an open terminal in the input of an OR gate behaves like a
0.
Finally, a T (true) output dictates that the other input of the corresponding
X-OR gate be connected to 0, and a C (complement) specifies a connection
to 1.
43• The size of a PLA is specified by the number of inputs,
the number of product terms, and the number of
outputs.
For n inputs, k product terms, and m outputs the
internal logic of the PLA consists of n buffer inverter
gates, k AND gates, m OR gates, and m X-OR gates.
When designing a digital system with a PLA, there is no
need to show the internal connections of the unit.
All that is needed is a PLA programming table from
which the PLA can be programmed to supply the
required logic.
44Consider The implementation of the Boolean functions
F₁ B+ A+ B.
Product term
1234
F2 =
= AC + BC
Inputs
A B C
01
1
0
AB
0
AC
ABC
BC
1
0
0 1
(a) PLA programming table
-
-
Outputs
(T) (C)
F
-
F
1
1
1
-
1
1
45BO
ОО
A A B всс
B
AB
F1
AC
ABC
ВС
(b) Fuse map F2
Figure 8.19 Programmable logic array.Question
Implement the following two Boolean
functions with a PLA:
F₁ (A, B, C) = Σm(0, 1, 2, 4)
F2(A, B, C) = m(0, 5, 6, 7)
47BC
0
BC
00
1
11
01 11 10
3
0 1
1
00 01
5
F₁(T) = AC + BC + AB
1
5
7
11
1
3
10
2
1
F₂(T) = ABC + AB + AC
6
2
BC
6
0
1
(a) K-map for F₁
BC
00
0
00
0
0
01 11 10
3
(b) K-map for F2
0
F₁ = AB + AC + BC
F₁(C)=(AB+ AC + BC)
5
0
0
0
5
01 11 10
3
0
0
7
0
F₂ = ABC + AB + AC
F₂(C)= ABC + AB + AC
2
6
2
6
48Solution
The K-maps for the functions F1 and F2, their minimization, and the
minimal expressions for both the true and complement forms of
those in sum of products are shown in Figure 8.20. For finding the
minimal in true form, consider the 1s on the map and for finding
the minimal in complement form consider the Os on the map.
Considering the 1s of F1
Considering the Os of F1
F1
F₁ (T) = A + B + AU
1 = AB + AC + BC
49Therefore,
Considering the 1s of F2
Considering the Os of F2
Therefore,
F₁(C) = (AB+ AC + BC)
F2(T) = + AB + AC
12 = A + B + C
F2₂(C)= ABC + AB+ AC
Out of F1(T), F1(C), F2(T), F2(C), the combination that gives the
minimum number of product terms is
F1(C) = (AB+ AC + BC)
F2(T) = AB + AC + ABC
This gives four distinct terms: AB, AC, and BC and. The PLA
programming table for this combination is shown in Figure 8.21a.
The implementation using a PLA is shown in Figure 8.21b.
50Figure 8.20 Example 8.9: K-maps.
Outputs
(C) (T)
F₁ F₂
Product term
1234
2288
AB
AC
Inputs
A B C
BC
11
1
1
-
-
1
1 1
ABC
000
(a) PLA programming table
Figure 8.21 Example 8.9: Programming table and fuse map (Contd.)
1
1
1
1
1
51Question
Write the program table to implement a BCD
to XS-3 code conversion using a PLA.
The BCD to XS-3 code conversion table and the expressions for the
XS-3 outputs are shown in Figure 8.22.
Decimal
6789SAWN10
2
3
4
5
6
BCD Code
B3 B₂ B₁ Bo
1
0
OOOOOOOOT
0
0
0
0
0
0
0
00001TTTOO
80110 OTTOO
OTOTOTOTO
1 0
0
0
1
1
0
00
1
1 10
1
1
00
XS-3 Code
E₁ E₂ E₁ E
OOOO OTT
0 0
0 1
0
CTTTTOOOOT
0
0
1
1
1
0
0
0
TOOTLOOTTO
1 1
0
0
1 0
0
1 1
0 0
COTOT OTOTO
1
0
1 0 1
1
0
1
E = m(0, 2, 4, 6, 8)
Ε, = Σ m(0, 3, 4, 7, 8)
Ε, = Σ m(1, 2, 3, 4, 9)
Ε, = Σ m(5, 6, 7, 8, 9)
1001
The don't cares are
d=d(10, 11, 12, 13, 14, 15)
(b) Expressions for outputs
(a) BCD to XS-3 conversion table
Figure 8.22 Example 8.10: Conversion table and expressions for outputs.
1 100
52B,B
B₂B₂
00
01
11
10
00
01
11
00
10
1
B,B
B₂B₂ 00
X
1
1
X
6
12
12
B
01 11
6O
13
X
X
E (T) = B₂
X
GR
1
X
3
X
h
15
01 11 10
15
10
H
1
E,(T) = B,B,+B,B
1
X
x
X
X
14
10
10
B,B
B₂B₂
00
01
11 X
10
(a) K-maps for E
B.B.
B₂B₂
00
01
10
00
(b) K-maps for E,
00
X
0
12
0
4
F
9
01
0
0
X
0
O
0
12
X
0
E₁ = Bo
E (C)=B₂
11 10
13
0
01 11
9
0
X
X
x
x
7
15
S
E
15
H
X
x
0
10
0
X
X
N
AD
14
10
14
10
E₁ = B,B,+B,B,
E,(C)=B,B,+B,B.
53B,B₂
B₂B₂ 00
8
00
01 1
11 x
10
B₁Bo
B₂B₂
8
00
4
01
N
Ix
11 X
10 1
01 11
00 01
- 2
E₂(T) = B₂B,B + B₂B₂+ B₂B₁
4
0
12
X
13
8
1
X
1
1
5
13
X
9
X
3
15
1
1x
11 10
3
X
X
X
15
6
11
10
-
XI
X
2
6
14
10
E3(T) = B3 + B₂B₁ + B₂B₁
B,B₂
B₂B₂
(c) K-maps for E₂
00 0
01
11
10
B₂B₂
8 o
X
B₁Bo
11
O
10
O
24
00 0
00
01 0
01
X
0
0
4
12
5
8
13
9
E₂B₂B,B₁ + B₂B + B₂B₁
E₂(C)= B.B₂B + B₂B + B₂B,
01
0
X
1
5
13
11
O
9
(d) K-maps for E3
Figure 8.23 Example 8.10: K-maps.
X
15
0
10
X
ol
X
11 10
3
7
14
15
10
11
0
X
X
2
6
14
10
Eg = BgB, + BgB,Bo
E3(C)=B3B₂+ B₂B₁B₁
54Observing the expressions in true and complement form for Eo, E1,
E2 and E3, we notice that two terms in E2(C) and E3(T) are common.
So minimal combinations are as follows:
Eo(T) = 0, E1 (T) = 10 + B1B0, E2(C) = B₂BB + B₂B + B₂B₁, E3(T) = B3 +
B2B0+ B2B1
55B₂-
B₂
B₁
B
PLA
4 inputs
4 outputs
(a) Block diagram
E₂
E₂
E₁
E₁
Product term
1 B₂
2
B₂B
3
B₂B₁
4 ByB, Bo
5
B,B
6
7
B₁B₁
B
Inputs
Outputs
B₂ B₂ B₁ B₁ E₁ E₂ E₁ E
(T) (C) (T) (T)
1
1
-
-
I
I
1
1 1
000
00
1
I
1
1
-
1
1
1 1
=
I
0
(b) PLA programming table
-
T
56